---
project: VMworld
kind: PIPELINE
name: Validate_Application_Tito_v3_Jenkins
enabled: true
description: ''
concurrency: 10
input:
  casToken: <casToken>
  restBlueprintId: 1d949a7c-dc20-4b57-aaa3-d68465184d3e
  restCloud_Target: platform:aws
  colorGood: '#36a64f'
  restSSHkey: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDC2sbYtHu65GhgEYk8kUCzCFBWlKM24hMiZwcwJy0mws9KwsCTEEH+aOlt0BvMcYchhV5I2Bxi3nS05vSXMZycoSG8t6Cw0Cw2IYHYNYzl8XCQ5QUtFDXoEK1eGEQTeXissTkR15Fk2CzBYXoGNUKe7mt6TQGKMpwXwNDZe2ZlJXRGsiTgLCdLehYUS+qIIOirQqD2VjBPVfp1ckCztgIydiQoZOilMAQBnJ6KGMr4DiuF8zevgFl4OcFDm7eeuP9cOSYXRtCyAtrB5xvYNGcf+AiMz7yun/HLwMkXab8Nzup1I+90GVtouMddpSp3gZyPpC7CVeToCebhe+EGUjzR
    riazm@riazm-a01.vmware.com
  sitePort: '80'
  sshHost: 13.239.137.32
  testSpecPath: /home/testrunner/titoactions.spec.js
  restWavefrontProxy: Commuter-tito-02439-1370868404.us-east-1.elb.amazonaws.com
  colorWarn: '#ff0000'
  GIT_CHANGE_SUBJECT: ''
  abxRoute53id: 8a7689dd6badd9cb016bb5014cb908ab
  titoRoute53: http://tito.vmwapj.com/Tito/
  loadTestUsers: '100'
  restABXZoneId: Z1DXP5AZ44Z4IY
  proceed: 'true'
  loadHatchRate: '10'
  slackOauthToken: <slackToken>
  wavefrontDashboard: https://vmware.wavefront.com/u/phQGBGjz91
  slackChannel: operationsaas-sre
  restMapsKey: <GoogleMapsKey>
  restBlueprintVersion: '1.6'
  webResourceName: Cloud_LoadBalancer_1
  GIT_EVENT_OWNER_NAME: ''
  restProjectId: d126e3a1-f3fd-41dd-bd24-030fb11be162
  restABXaliasHostedZoneId: Z1GM3OXH4ZPM65
  sshHostOnPrem: 172.30.22.59
  websiteBase: '""'
  restABXTitoFQDN: tito.vmwapj.com
_inputMeta:
  casToken:
    mandatory: true
    description: CAS API Token for Organization
  restBlueprintId:
    mandatory: true
    description: Blueprint Id
  restCloud_Target:
    mandatory: true
    description: Cloud Target Tag
  colorGood:
    mandatory: true
    description: Slack message color coding - green
  restSSHkey:
    mandatory: true
    description: SSH Key
  sitePort:
    mandatory: true
    description: Tito Website Port
  sshHost:
    mandatory: true
    description: Cypress and Locust
  testSpecPath:
    mandatory: true
    description: Cypres Spec Path
  restWavefrontProxy:
    mandatory: true
    description: Wavefront Proxy Public Address
  colorWarn:
    mandatory: true
    description: Slack message color coding - red
  GIT_CHANGE_SUBJECT:
    mandatory: true
    description: ''
  abxRoute53id:
    mandatory: true
    description: ABX Action Id Route53 Alias UPSRT
  titoRoute53:
    mandatory: true
    description: FQDN Tito
  loadTestUsers:
    mandatory: true
    description: Locust Max Users Per Second
  restABXZoneId:
    mandatory: true
    description: AWS Route53 ZoneID
  proceed:
    mandatory: false
    description: ''
  loadHatchRate:
    mandatory: true
    description: Locust User Hatch Rate
  slackOauthToken:
    mandatory: true
    description: Slack Bot OAuth
  wavefrontDashboard:
    mandatory: false
    description: Wavefront Dashboard Live Link
  slackChannel:
    mandatory: true
    description: Slack Channel
  restMapsKey:
    mandatory: true
    description: Google Maps Directions API Key
  restBlueprintVersion:
    mandatory: true
    description: Blueprint version
  webResourceName:
    mandatory: true
    description: Deployment resource in JSON for address
  GIT_EVENT_OWNER_NAME:
    mandatory: true
    description: ''
  restProjectId:
    mandatory: true
    description: Cloud Assembly Project Id
  restABXaliasHostedZoneId:
    mandatory: true
    description: aliasHostedZoneId
  sshHostOnPrem:
    mandatory: false
    description: ''
  websiteBase:
    mandatory: true
    description: Tito Website Path
  restABXTitoFQDN:
    mandatory: true
    description: Route53 DNS for Tito
output:
  frontendIP: ${Deploy.Get Website IP.output.properties.ipAddress}
starred:
  input: restCloud_Target
ciWorkspace:
  endpoint: Shared Docker Host
  image: node:10
  registry: ''
  path: ''
  cache:
  - ''
stageOrder:
- Deploy
- Test
- Release
stages:
  Test:
    taskOrder:
    - JenkinsUIandPerf
    - SlackNotifyUI-pass,SlackNotifyUI-fail,SlackNotifyUI-Null
    tasks:
      JenkinsUIandPerf:
        type: Jenkins
        endpoints:
          jenkinsServer: JenkinsMaster
        input:
          job: master
          parameters: {
            sshHost: '${input.sshHost}',
            ipAddress: '${Deploy.Get Website IP.output.properties.ipAddress}',
            websiteBase: '${input.websiteBase}',
            testSpecPath: '${input.testSpecPath}',
            loadHatchRate: '${input.loadHatchRate}',
            loadTestUsers: '${input.loadTestUsers}',
            slackThreadId: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            testSpecLocust: locustWavefrontBase.py,
            restWavefrontProxy: '${input.restWavefrontProxy}'
          }
      SlackNotifyUI-fail:
        type: Custom
        preCondition: ${Test.JenkinsUIandPerf.status} == "FAILED"
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: Cypress UI validation failed tests.,
            colorHex: '${input.colorWarn}',
            authToken: '${input.slackOauthToken}',
            slackThread: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            parentMessage: '',
            messageHeading: Codestream Notification
          }
      SlackNotifyUI-Null:
        type: Custom
        preCondition: ${Test.JenkinsUIandPerf.status} == "null"
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: 'Cypress UI validation failed to start, check ssh connectivty',
            colorHex: '${input.colorWarn}',
            authToken: '${input.slackOauthToken}',
            slackThread: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            parentMessage: '',
            messageHeading: Codestream Notification
          }
      SlackNotifyUI-pass:
        type: Custom
        ignoreFailure: true
        preCondition: ${Test.JenkinsUIandPerf.status} == "COMPLETED"
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: ':tada: *Successful* -  completion of Cypress UI test automation for http://${Deploy.Get
              Website IP.output.properties.ipAddress}${input.websiteBase} ',
            colorHex: '${input.colorGood}',
            authToken: '${input.slackOauthToken}',
            slackThread: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            messageHeading: Codestream Notification
          }
  Deploy:
    taskOrder:
    - SlackNotify,Get_CASToken
    - MultiCloud REST
    - checkDeployment
    - getDeployment
    - Get Website IP
    - Poll Application
    tasks:
      getDeployment:
        type: REST
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json,
            Authorization: 'Bearer ${Deploy.Get_CASToken.output.responseBody.token}'
          }
          action: get
          url: https://api.mgmt.cloud.vmware.com/deployment/api/deployments/${Deploy.checkDeployment.output.responseBody.deploymentId}?expandResources=true
      SlackNotify:
        type: Custom
        ignoreFailure: true
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: 'A new deploy has been triggered by git commit "${input.GIT_CHANGE_SUBJECT}" by ${input.GIT_EVENT_OWNER_NAME},
              you can monitor pipeline progress here ${executionUrl}',
            colorHex: '${input.colorGood}',
            authToken: '${input.slackOauthToken}',
            slackThread: '',
            messageHeading: Codestream Notification
          }
      checkDeployment:
        type: POLL
        endpoints:
          agent: SSH Host
        input:
          ignoreFailure: true
          headers: {
            Accept: application/json,
            Content-Type: application/json,
            Authorization: 'Bearer ${Deploy.Get_CASToken.output.responseBody.token}'
          }
          exitCriteria: {
            failure: status == "FAILED" ||  status == "CANCELLED",
            success: status == "FINISHED"
          }
          pollCount: 30
          pollIntervalSeconds: 60
          url: https://api.mgmt.cloud.vmware.com/blueprint/api/blueprint-requests/${Deploy.MultiCloud
            REST.output.responseBody.id}
      MultiCloud REST:
        type: REST
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json,
            Authorization: 'Bearer ${Deploy.Get_CASToken.output.responseBody.token}'
          }
          payload: |-
            {
              "projectId": "${input.restProjectId}",
              "reason": "pipeline build",
              "description": "Tito Application Pipeline Build - ${input.restCloud_Target}",
              "plan": false,
              "destroy": false,
              "ignoreDeleteFailures": false,
              "simulate": false,
              "tags": [],
              "blueprintId": "${input.restBlueprintId}",
              "blueprintVersion": ${input.restBlueprintVersion},
              "inputs": {
                "fe_unit": 1,
                "application": "tito",
                "environment": "prod",
                "mapsapikey": "${input.restMapsKey}",
                "ssh_key": "${input.restSSHkey}",
                "platform": "${input.restCloud_Target}",
                "wavefront_proxy": "${input.restWavefrontProxy}"
              }
            }
          action: post
          url: https://api.mgmt.cloud.vmware.com/blueprint/api/blueprint-requests
      Get_CASToken:
        type: REST
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json
          }
          payload: '{"refreshToken": ${input.casToken} }'
          action: post
          url: https://api.mgmt.cloud.vmware.com/iaas/login
      Get Website IP:
        type: Custom
        ignoreFailure: true
        input:
          name: GetResourceAddress
          version: '1.0'
          properties: {
            nodeName: '${input.webResourceName}',
            deploymentDetails: '${Deploy.getDeployment.output.responseBody}'
          }
      Poll Application:
        type: CI
        input:
          process: [
            ]
          steps: [
            '#!/bin/bash',
            set +e,
            attempt_counter=0,
            max_attempts=60,
            '',
            while true,
            do,
            '  STATUS=$(curl -s -f -o /dev/null -w ''%{http_code}'' http://${Deploy.Get Website IP.output.properties.ipAddress}:${input.sitePort})',
            '  if [ $STATUS -eq 200 ]; then',
            '    echo "Got 200! All done!"',
            '    break',
            '  else',
            '    echo "Got $STATUS :( Not done yet..."',
            '  fi',
            '  attempt_counter=$(($attempt_counter+1))',
            '  sleep 10',
            '  if [ $attempt_counter -eq $max_attempts ];then',
            '      echo "Max attempts reached"',
            '      exit 1',
            '  ',
            done]
          export: [
            ]
          artifacts: [
            ]
  Release:
    taskOrder:
    - Get_CAS_Token
    - BlueGreenRoute53ABX
    - Poll_ABX_Completion
    - SlackNotifyRoute53
    tasks:
      Poll_ABX_Completion:
        type: POLL
        ignoreFailure: true
        preCondition: ${input.restCloud_Target} == "platform:aws" && ${Test.JenkinsUIandPerf.status} ==
          "COMPLETED"
        input:
          ignoreFailure: true
          headers: {
            Accept: application/json,
            Content-Type: application/json,
            Authorization: 'Bearer ${Release.Get_CAS_Token.output.responseBody.token}'
          }
          exitCriteria: {
            failure: runState == "FAILED" || runState == "DEPLOYMENT_FAILED" || runState == "HANDLING_ERROR"
              || runState == "CANCELLED",
            success: runState == "COMPLETED"
          }
          pollCount: 30
          pollIntervalSeconds: 60
          url: https://api.mgmt.cloud.vmware.com/abx/api/resources/action-runs/${Release.BlueGreenRoute53ABX.output.responseBody.id}
      SlackNotifyRoute53:
        type: Custom
        preCondition: ${input.restCloud_Target} == "platform:aws"  && ${Test.JenkinsUIandPerf.status}
          == "COMPLETED"
        input:
          name: SlackBotThreadedAttachments
          version: '1.0'
          properties: {
            channel: '${input.slackChannel}',
            message: ' :tada: *Successful* - Completed Route53 DNS failover to the newly deployed Tito
              application. ${input.titoRoute53}',
            colorHex: '${input.colorGood}',
            authToken: '${input.slackOauthToken}',
            slackThread: '${Deploy.SlackNotify.output.properties.slackThreadId}',
            parentMessage: '',
            messageHeading: Codestream Notification
          }
      BlueGreenRoute53ABX:
        type: REST
        ignoreFailure: true
        preCondition: ${input.restCloud_Target} == "platform:aws" && ${Test.JenkinsUIandPerf.status} ==
          "COMPLETED"
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json,
            Authorization: 'Bearer ${Release.Get_CAS_Token.output.responseBody.token}'
          }
          payload: |-
            {
                "projectId": "${input.restProjectId}",
                "inputs": {
                "name": "${input.restABXTitoFQDN}",
                "zoneId": "${input.restABXZoneId}",
                "DNSName": "dualstack.${Deploy.Get Website IP.output.properties.ipAddress}",
                "aliasHostedZoneId": "${input.restABXaliasHostedZoneId}"
              }
            }
          action: post
          url: https://api.mgmt.cloud.vmware.com/abx/api/resources/actions/${input.abxRoute53id}/action-runs
      Get_CAS_Token:
        type: REST
        input:
          headers: {
            Accept: application/json,
            Content-Type: application/json
          }
          payload: '{"refreshToken": ${input.casToken} }'
          action: post
          url: https://api.mgmt.cloud.vmware.com/iaas/login
